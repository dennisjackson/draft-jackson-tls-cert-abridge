



Transport Layer Security                                      D. Jackson
Internet-Draft                                                   Mozilla
Intended status: Informational                               22 May 2023
Expires: 23 November 2023


            Abridged Certificate Compression for the WebPKI
                 draft-jackson-tls-cert-abridge-latest

Abstract

   This is the working area for the individual Internet-Draft, "Abridged
   Certificate Compression for the WebPKI".  It defines a compression
   scheme suitable for use in RFC 8879: TLS Certificate Compression
   (https://www.rfc-editor.org/rfc/rfc8879.html) which uses WebPKI
   specific information to deliver a substantial improvement over the
   existing generic compression schemes in use today whilst being
   careful to ensure CAs and website operators are treated equitably.

   As well as substantially decreasing the size of the end-entity TLS
   certificate, this draft also compresses any intermediate or root
   Certificate used in the Web PKI to a couple of bytes.  This not only
   reduces the latency of TLS session establishment in general, but has
   an outsized impact on QUIC handshakes due to the magnification limits
   on the server's response.  It also allows for an easy transition to
   Post-Quantum TLS Certificates since intermediate and root
   certificates no longer contribute to packet size on the wire.  This
   draft may also be useful in other situations where certificate chains
   are stored, for example, in the operation of Certificate Transparency
   logs.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the Transport Layer
   Security Working Group mailing list (tls@ietf.org), which is archived
   at https://mailarchive.ietf.org/arch/browse/tls/.

   Source for this draft and an issue tracker can be found at
   https://github.com/dennisjackson/draft-jackson-tls-cert-abridge.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 23 November 2023.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Related Work
   2.  Conventions and Definitions
   3.   Description
     3.1.  Versioning
     3.2.   Method 1: Naive
       3.2.1.   Setup
     3.3.   Method 2: Optimized
       3.3.1.   Setup
     3.4.  Tradeoffs and Open Questions
       3.4.1.  Bikeshedding Opportunities
   4.   Expected Benefits
   5.   Deployment Considerations
   6.  Security Considerations
   7.  IANA Considerations
   8.  Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   TODO Introduction

1.1.  Related Work

   This draft defines a certificate compression mechanism suitable for
   use with RFC 8879: TLS Certificate Compression (https://www.rfc-
   editor.org/rfc/rfc8879.html).

   The intent of this draft is to provide a compelling alternative to
   draft-kampanakis-tls-scas (https://www.ietf.org/id/draft-kampanakis-
   tls-scas-latest-03.html) as it provides better compression, doesn't
   require any additional retries or error handling if connections fail
   and doesn't require clients to be frequently updated.

   CBOR Encoded X.509 (C509) (https://www.ietf.org/archive/id/draft-
   ietf-cose-cbor-encoded-cert-05.html) defines a concise alternative
   format for X.509 certificates.  If this format were to become widely
   used on the WebPKI, defining an alternative version of this draft
   specifically for C509 certificates would be sensible.

   Compact TLS, (cTLS) (https://www.ietf.org/archive/id/draft-ietf-tls-
   ctls-08.html) defines a version of TLS1.3 which allows a pre-
   configured client and server to establish a session with minimal
   overhead on the wire.  In particular, it supports the use of a
   predefined list of certificates known to both parties which can be
   compressed.  However, cTLS is still at an early stage and may be
   challenging to deploy in a WebPKI context due to the need for clients
   and servers to agree on the profile template to be used in the
   handshake.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.   Description

   This section is a work in progress.  It currently defines two
   distinct approaches with differing tradeoffs but prior to progression
   this will need to be winnowed down to a single method.

3.1.  Versioning

   *  Take the listing available here.  (TODO)

3.2.   Method 1: Naive

3.2.1.   Setup

   *  Convert to DER and concatenate.

   *  Pass the resulting blob to Zstd

3.2.1.1.  Operation

   *  Recommend use of max compression level since it is a start-up
      operation on the TLS Server and doesn't impact decompression
      speed.

   *  Use zstd with dict.

3.3.   Method 2: Optimized

3.3.1.   Setup

   *  Do the lexicographic ordering and assign a two-byte identifier in
      sequence.

   *  Do CT-fetch and train keyed zstd dictionary

3.3.1.1.  Operation

   *  Do keyword substitution on certificate chain, replacing
      certificate chain with 3 byte identifier where possible.

   *  Do keyed zstd dictionary on the remaining file.

3.4.  Tradeoffs and Open Questions

   Method 1 is very simple to implement, but isn't quite as efficient
   and imposes an additional storage requirement on clients.  It can
   likely be deployed as-is with minimal changes to all existing
   implementations.

   Method 2 requires more custom code, but reduces the storage footprint
   and delivers a better compression ratio.

3.4.1.  Bikeshedding Opportunities

   *  zstd vs brotli *

4.   Expected Benefits

   This draft is very much a work in progress, however a preliminary
   evaluation based on a few thousand certificate chains is available.

   +=============================+=====================+===============+
   | Compression Method          | Median Size (Bytes) | Relative      |
   |                             |                     | Size          |
   +=============================+=====================+===============+
   | Original, without any form  | 4022                | 100%          |
   | of compression              |                     |               |
   +-----------------------------+---------------------+---------------+
   | Using TLS Certificate       | 3335                | 83%           |
   | Compression with zstd       |                     |               |
   +-----------------------------+---------------------+---------------+
   | Transmitting only the End-  | 1664                | 41%           |
   | Entity TLS Certificate      |                     |               |
   +-----------------------------+---------------------+---------------+
   | TLS Cert Compression & Only | 1469                | 37%           |
   | End-Entity TLS Certificate  |                     |               |
   +-----------------------------+---------------------+---------------+
   | *This Draft, Naive          | 1351                | 34%           |
   | Implementation*             |                     |               |
   +-----------------------------+---------------------+---------------+
   | *This Draft, Optimized      | 949                 | 24%           |
   | Implementation*             |                     |               |
   +-----------------------------+---------------------+---------------+

                                  Table 1

   Performance is also greatly enhanced at the tails.  For the optimized
   implementation:

          +============+==========+============+===============+
          | Percentile | Original | This Draft | Relative Size |
          +============+==========+============+===============+
          | 5th        | 2755     | 641        | 23%           |
          +------------+----------+------------+---------------+
          | 50th       | 4022     | 949        | 24%           |
          +------------+----------+------------+---------------+
          | 95th       | 5801     | 1613       | 28%           |
          +------------+----------+------------+---------------+

                                 Table 2

5.   Deployment Considerations

   As of May 2023 this listing from the CCADB currently occupies 2.6 MB
   of disk space.  The on-disk footprint can be further reduced as many
   WebPKI clients (e.g.  Mozilla Firefox, Google Chrome) already ship a
   copy of every intermediate and root cert they trust for use in
   certificate validation.

   As root and intermediate Certificates typically have multi-year
   lifetime, the churn in the CCADB is relatively low and a new version
   of this compression scheme could be minted at yearly intervals, with
   the only change being the CCADB list used.  Further, as this scheme
   separates trust negotiation from compression, its possible for
   proposed root and intermediate certificates to be included in the
   compression scheme ahead of any public trust decisions, allowing them
   to benefit from compression from the very first day of use.

6.  Security Considerations

   Note that as this draft specifies a compression scheme, it does not
   impact the negotiation of trust between clients and servers and is
   robust in the face of changes to CCADB or trust in a particular
   WebPKI CA.  The client's trusted list of CAs does not need to be a
   subset or superset of the CCADB list and revocation of trust in a CA
   does not impact the operation of this compression scheme.  Similarly,
   servers who use roots or intermediates outside the CCADB can still
   offer the scheme and benefit from it

7.  IANA Considerations

   This document has no IANA actions.

8.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Dennis Jackson
   Mozilla
   Email: ietf@dennis-jackson.uk
