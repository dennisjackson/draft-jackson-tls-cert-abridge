



Transport Layer Security                                      D. Jackson
Internet-Draft                                                   Mozilla
Intended status: Informational                               22 May 2023
Expires: 23 November 2023


            Abridged Certificate Compression for the WebPKI
                 draft-jackson-tls-cert-abridge-latest

Abstract

   This is the working area for the individual Internet-Draft, "Abridged
   Certificate Compression for the WebPKI".  It defines a compression
   scheme suitable for use in RFC 8879: TLS Certificate Compression
   (https://www.rfc-editor.org/rfc/rfc8879.html) which delivers a
   substantial improvement over the existing generic compression schemes
   in use today whilst ensuring equitable treatment for both CAs and
   website operators.

   This draft may also be useful in other situations where certificate
   chains are stored, for example, in the operation of Certificate
   Transparency logs.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the Transport Layer
   Security Working Group mailing list (tls@ietf.org), which is archived
   at https://mailarchive.ietf.org/arch/browse/tls/.

   Source for this draft and an issue tracker can be found at
   https://github.com/dennisjackson/draft-jackson-tls-cert-abridge.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 23 November 2023.

Copyright Notice

   Copyright (c) 2023 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.   Description
     3.1.  Versioning
     3.2.   Method 1: Naive
       3.2.1.   Setup
     3.3.   Method 2: Optimized
       3.3.1.   Setup
     3.4.  Tradeoffs and Open Questions
       3.4.1.  Bikeshedding Opportunities
   4.   Deployment Considerations
   5.  Security Considerations
   6.  IANA Considerations
   7.  Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   TODO Introduction

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.   Description

   This section is a work in progress.  It currently defines two
   distinct approaches with differing tradeoffs but prior to progression
   this will need to be winnowed down to a single method.

3.1.  Versioning

   *  Take the listing available here.  (TODO)

3.2.   Method 1: Naive

3.2.1.   Setup

   *  Convert to DER and concatenate.

   *  Pass the resulting blob to Zstd

3.2.1.1.  Operation

   *  Recommend use of max compression level since it is a start-up
      operation on the TLS Server and doesn't impact decompression
      speed.

   *  Use zstd with dict.

3.3.   Method 2: Optimized

3.3.1.   Setup

   *  Do the lexicographic ordering and assign a two-byte identifier in
      sequence.

   *  Do CT-fetch and train keyed zstd dictionary

3.3.1.1.  Operation

   *  Do keyword substitution on certificate chain, replacing
      certificate chain with 3 byte identifier where possible.

   *  Do keyed zstd dictionary on the remaining file.

3.4.  Tradeoffs and Open Questions

   Method 1 is very simple to implement, but isn't quite as efficient
   and imposes an additional storage requirement on clients.  It can
   likely be deployed as-is with minimal changes to all existing
   implementations.

   Method 2 requires more custom code, but reduces the storage footprint
   and delivers a better compression ratio.

3.4.1.  Bikeshedding Opportunities

   *  zstd vs brotli *

4.   Deployment Considerations

5.  Security Considerations

   TODO Security

6.  IANA Considerations

   This document has no IANA actions.

7.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Dennis Jackson
   Mozilla
   Email: ietf@dennis-jackson.uk
